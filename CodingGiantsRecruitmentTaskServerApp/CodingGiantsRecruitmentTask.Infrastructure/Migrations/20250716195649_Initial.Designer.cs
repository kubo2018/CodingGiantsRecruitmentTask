// <auto-generated />
using System;
using CodingGiantsRecruitmentTask.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CodingGiantsRecruitmentTask.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250716195649_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CodingGiantsRecruitmentTask.Domain.Entities.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFromBot")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.ToTable("ChatMessages", (string)null);
                });

            modelBuilder.Entity("CodingGiantsRecruitmentTask.Domain.Entities.ChatMessageRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChatMessageRatingTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChatMessageId")
                        .IsUnique();

                    b.HasIndex("ChatMessageRatingTypeId");

                    b.ToTable("ChatMessageRatings", (string)null);
                });

            modelBuilder.Entity("CodingGiantsRecruitmentTask.Domain.Entities.ChatMessageRatingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ChatMessageRatingTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Icon = "thumb_up",
                            Name = "Dobra odpowiedź"
                        },
                        new
                        {
                            Id = 2,
                            Icon = "thumb_down",
                            Name = "Zła odpowiedź"
                        });
                });

            modelBuilder.Entity("CodingGiantsRecruitmentTask.Domain.Entities.ChatMessageRating", b =>
                {
                    b.HasOne("CodingGiantsRecruitmentTask.Domain.Entities.ChatMessage", "ChatMessage")
                        .WithOne("ChatMessageRating")
                        .HasForeignKey("CodingGiantsRecruitmentTask.Domain.Entities.ChatMessageRating", "ChatMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodingGiantsRecruitmentTask.Domain.Entities.ChatMessageRatingType", "ChatMessageRatingType")
                        .WithMany("ChatMessageRatings")
                        .HasForeignKey("ChatMessageRatingTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChatMessage");

                    b.Navigation("ChatMessageRatingType");
                });

            modelBuilder.Entity("CodingGiantsRecruitmentTask.Domain.Entities.ChatMessage", b =>
                {
                    b.Navigation("ChatMessageRating");
                });

            modelBuilder.Entity("CodingGiantsRecruitmentTask.Domain.Entities.ChatMessageRatingType", b =>
                {
                    b.Navigation("ChatMessageRatings");
                });
#pragma warning restore 612, 618
        }
    }
}
